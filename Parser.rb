#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

###### racc/parser.rb begin
unless $".index 'racc/parser.rb'
$".push 'racc/parser.rb'
self.class.module_eval(<<'...end racc/parser.rb/module_eval...', 'racc/parser.rb', 1)
#
# $Id: 2bd697d1146b280d8d3878e21e556ef769484a37 $
#
# Copyright (c) 1999-2006 Minero Aoki
#
# This program is free software.
# You can distribute/modify this program under the same terms of ruby.
#
# As a special exception, when this code is copied by Racc
# into a Racc output file, you may use that output file
# without restriction.
#

require 'racc/info'

unless defined?(NotImplementedError)
  NotImplementedError = NotImplementError # :nodoc:
end

module Racc
  class ParseError < StandardError; end
end
unless defined?(::ParseError)
  ParseError = Racc::ParseError
end

# Racc is a LALR(1) parser generator.
# It is written in Ruby itself, and generates Ruby programs.
#
# == Command-line Reference
#
#     racc [-o<var>filename</var>] [--output-file=<var>filename</var>]
#          [-e<var>rubypath</var>] [--embedded=<var>rubypath</var>]
#          [-v] [--verbose]
#          [-O<var>filename</var>] [--log-file=<var>filename</var>]
#          [-g] [--debug]
#          [-E] [--embedded]
#          [-l] [--no-line-convert]
#          [-c] [--line-convert-all]
#          [-a] [--no-omit-actions]
#          [-C] [--check-only]
#          [-S] [--output-status]
#          [--version] [--copyright] [--help] <var>grammarfile</var>
#
# [+filename+]
#   Racc grammar file. Any extention is permitted.
# [-o+outfile+, --output-file=+outfile+]
#   A filename for output. default is <+filename+>.tab.rb
# [-O+filename+, --log-file=+filename+]
#   Place logging output in file +filename+.
#   Default log file name is <+filename+>.output.
# [-e+rubypath+, --executable=+rubypath+]
#   output executable file(mode 755). where +path+ is the Ruby interpreter.
# [-v, --verbose]
#   verbose mode. create +filename+.output file, like yacc's y.output file.
# [-g, --debug]
#   add debug code to parser class. To display debuggin information,
#   use this '-g' option and set @yydebug true in parser class.
# [-E, --embedded]
#   Output parser which doesn't need runtime files (racc/parser.rb).
# [-C, --check-only]
#   Check syntax of racc grammer file and quit.
# [-S, --output-status]
#   Print messages time to time while compiling.
# [-l, --no-line-convert]
#   turns off line number converting.
# [-c, --line-convert-all]
#   Convert line number of actions, inner, header and footer.
# [-a, --no-omit-actions]
#   Call all actions, even if an action is empty.
# [--version]
#   print Racc version and quit.
# [--copyright]
#   Print copyright and quit.
# [--help]
#   Print usage and quit.
#
# == Generating Parser Using Racc
#
# To compile Racc grammar file, simply type:
#
#   $ racc parse.y
#
# This creates Ruby script file "parse.tab.y". The -o option can change the output filename.
#
# == Writing A Racc Grammar File
#
# If you want your own parser, you have to write a grammar file.
# A grammar file contains the name of your parser class, grammar for the parser,
# user code, and anything else.
# When writing a grammar file, yacc's knowledge is helpful.
# If you have not used yacc before, Racc is not too difficult.
#
# Here's an example Racc grammar file.
#
#   class Calcparser
#   rule
#     target: exp { print val[0] }
#
#     exp: exp '+' exp
#        | exp '*' exp
#        | '(' exp ')'
#        | NUMBER
#   end
#
# Racc grammar files resemble yacc files.
# But (of course), this is Ruby code.
# yacc's $$ is the 'result', $0, $1... is
# an array called 'val', and $-1, $-2... is an array called '_values'.
#
# See the {Grammar File Reference}[rdoc-ref:lib/racc/rdoc/grammar.en.rdoc] for
# more information on grammar files.
#
# == Parser
#
# Then you must prepare the parse entry method. There are two types of
# parse methods in Racc, Racc::Parser#do_parse and Racc::Parser#yyparse
#
# Racc::Parser#do_parse is simple.
#
# It's yyparse() of yacc, and Racc::Parser#next_token is yylex().
# This method must returns an array like [TOKENSYMBOL, ITS_VALUE].
# EOF is [false, false].
# (TOKENSYMBOL is a Ruby symbol (taken from String#intern) by default.
# If you want to change this, see the grammar reference.
#
# Racc::Parser#yyparse is little complicated, but useful.
# It does not use Racc::Parser#next_token, instead it gets tokens from any iterator.
#
# For example, <code>yyparse(obj, :scan)</code> causes
# calling +obj#scan+, and you can return tokens by yielding them from +obj#scan+.
#
# == Debugging
#
# When debugging, "-v" or/and the "-g" option is helpful.
#
# "-v" creates verbose log file (.output).
# "-g" creates a "Verbose Parser".
# Verbose Parser prints the internal status when parsing.
# But it's _not_ automatic.
# You must use -g option and set +@yydebug+ to +true+ in order to get output.
# -g option only creates the verbose parser.
#
# === Racc reported syntax error.
#
# Isn't there too many "end"?
# grammar of racc file is changed in v0.10.
#
# Racc does not use '%' mark, while yacc uses huge number of '%' marks..
#
# === Racc reported "XXXX conflicts".
#
# Try "racc -v xxxx.y".
# It causes producing racc's internal log file, xxxx.output.
#
# === Generated parsers does not work correctly
#
# Try "racc -g xxxx.y".
# This command let racc generate "debugging parser".
# Then set @yydebug=true in your parser.
# It produces a working log of your parser.
#
# == Re-distributing Racc runtime
#
# A parser, which is created by Racc, requires the Racc runtime module;
# racc/parser.rb.
#
# Ruby 1.8.x comes with Racc runtime module,
# you need NOT distribute Racc runtime files.
#
# If you want to include the Racc runtime module with your parser.
# This can be done by using '-E' option:
#
#   $ racc -E -omyparser.rb myparser.y
#
# This command creates myparser.rb which `includes' Racc runtime.
# Only you must do is to distribute your parser file (myparser.rb).
#
# Note: parser.rb is LGPL, but your parser is not.
# Your own parser is completely yours.
module Racc

  unless defined?(Racc_No_Extentions)
    Racc_No_Extentions = false # :nodoc:
  end

  class Parser

    Racc_Runtime_Version = ::Racc::VERSION
    Racc_Runtime_Revision = '$Id: 2bd697d1146b280d8d3878e21e556ef769484a37 $'

    Racc_Runtime_Core_Version_R = ::Racc::VERSION
    Racc_Runtime_Core_Revision_R = '$Id: 2bd697d1146b280d8d3878e21e556ef769484a37 $'.split[1]
    begin
      if Object.const_defined?(:RUBY_ENGINE) and RUBY_ENGINE == 'jruby'
        require 'racc/cparse-jruby.jar'
        com.headius.racc.Cparse.new.load(JRuby.runtime, false)
      else
        require 'racc/cparse'
      end
    # Racc_Runtime_Core_Version_C  = (defined in extention)
      Racc_Runtime_Core_Revision_C = Racc_Runtime_Core_Id_C.split[2]
      unless new.respond_to?(:_racc_do_parse_c, true)
        raise LoadError, 'old cparse.so'
      end
      if Racc_No_Extentions
        raise LoadError, 'selecting ruby version of racc runtime core'
      end

      Racc_Main_Parsing_Routine    = :_racc_do_parse_c # :nodoc:
      Racc_YY_Parse_Method         = :_racc_yyparse_c # :nodoc:
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_C # :nodoc:
      Racc_Runtime_Core_Revision   = Racc_Runtime_Core_Revision_C # :nodoc:
      Racc_Runtime_Type            = 'c' # :nodoc:
    rescue LoadError
puts $!
puts $!.backtrace
      Racc_Main_Parsing_Routine    = :_racc_do_parse_rb
      Racc_YY_Parse_Method         = :_racc_yyparse_rb
      Racc_Runtime_Core_Version    = Racc_Runtime_Core_Version_R
      Racc_Runtime_Core_Revision   = Racc_Runtime_Core_Revision_R
      Racc_Runtime_Type            = 'ruby'
    end

    def Parser.racc_runtime_type # :nodoc:
      Racc_Runtime_Type
    end

    def _racc_setup
      @yydebug = false unless self.class::Racc_debug_parser
      @yydebug = false unless defined?(@yydebug)
      if @yydebug
        @racc_debug_out = $stderr unless defined?(@racc_debug_out)
        @racc_debug_out ||= $stderr
      end
      arg = self.class::Racc_arg
      arg[13] = true if arg.size < 14
      arg
    end

    def _racc_init_sysvars
      @racc_state  = [0]
      @racc_tstack = []
      @racc_vstack = []

      @racc_t = nil
      @racc_val = nil

      @racc_read_next = true

      @racc_user_yyerror = false
      @racc_error_status = 0
    end

    # The entry point of the parser. This method is used with #next_token.
    # If Racc wants to get token (and its value), calls next_token.
    #
    # Example:
    #     def parse
    #       @q = [[1,1],
    #             [2,2],
    #             [3,3],
    #             [false, '$']]
    #       do_parse
    #     end
    #
    #     def next_token
    #       @q.shift
    #     end
    def do_parse
      __send__(Racc_Main_Parsing_Routine, _racc_setup(), false)
    end

    # The method to fetch next token.
    # If you use #do_parse method, you must implement #next_token.
    #
    # The format of return value is [TOKEN_SYMBOL, VALUE].
    # +token-symbol+ is represented by Ruby's symbol by default, e.g. :IDENT
    # for 'IDENT'.  ";" (String) for ';'.
    #
    # The final symbol (End of file) must be false.
    def next_token
      raise NotImplementedError, "#{self.class}\#next_token is not defined"
    end

    def _racc_do_parse_rb(arg, in_debug)
      action_table, action_check, action_default, action_pointer,
      _,            _,            _,              _,
      _,            _,            token_table,    * = arg

      _racc_init_sysvars
      tok = act = i = nil

      catch(:racc_end_parse) {
        while true
          if i = action_pointer[@racc_state[-1]]
            if @racc_read_next
              if @racc_t != 0   # not EOF
                tok, @racc_val = next_token()
                unless tok      # EOF
                  @racc_t = 0
                else
                  @racc_t = (token_table[tok] or 1)   # error token
                end
                racc_read_token(@racc_t, tok, @racc_val) if @yydebug
                @racc_read_next = false
              end
            end
            i += @racc_t
            unless i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
          else
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end
        end
      }
    end

    # Another entry point for the parser.
    # If you use this method, you must implement RECEIVER#METHOD_ID method.
    #
    # RECEIVER#METHOD_ID is a method to get next token.
    # It must 'yield' the token, which format is [TOKEN-SYMBOL, VALUE].
    def yyparse(recv, mid)
      __send__(Racc_YY_Parse_Method, recv, mid, _racc_setup(), false)
    end

    def _racc_yyparse_rb(recv, mid, arg, c_debug)
      action_table, action_check, action_default, action_pointer,
      _,            _,            _,              _,
      _,            _,            token_table,    * = arg

      _racc_init_sysvars

      catch(:racc_end_parse) {
        until i = action_pointer[@racc_state[-1]]
          while act = _racc_evalact(action_default[@racc_state[-1]], arg)
            ;
          end
        end
        recv.__send__(mid) do |tok, val|
          unless tok
            @racc_t = 0
          else
            @racc_t = (token_table[tok] or 1)   # error token
          end
          @racc_val = val
          @racc_read_next = false

          i += @racc_t
          unless i >= 0 and
                 act = action_table[i] and
                 action_check[i] == @racc_state[-1]
            act = action_default[@racc_state[-1]]
          end
          while act = _racc_evalact(act, arg)
            ;
          end

          while !(i = action_pointer[@racc_state[-1]]) ||
                ! @racc_read_next ||
                @racc_t == 0  # $
            unless i and i += @racc_t and
                   i >= 0 and
                   act = action_table[i] and
                   action_check[i] == @racc_state[-1]
              act = action_default[@racc_state[-1]]
            end
            while act = _racc_evalact(act, arg)
              ;
            end
          end
        end
      }
    end

    ###
    ### common
    ###

    def _racc_evalact(act, arg)
      action_table, action_check, _, action_pointer,
      _,            _,            _, _,
      _,            _,            _, shift_n,
      reduce_n,     * = arg
      nerr = 0   # tmp

      if act > 0 and act < shift_n
        #
        # shift
        #
        if @racc_error_status > 0
          @racc_error_status -= 1 unless @racc_t <= 1 # error token or EOF
        end
        @racc_vstack.push @racc_val
        @racc_state.push act
        @racc_read_next = true
        if @yydebug
          @racc_tstack.push @racc_t
          racc_shift @racc_t, @racc_tstack, @racc_vstack
        end

      elsif act < 0 and act > -reduce_n
        #
        # reduce
        #
        code = catch(:racc_jump) {
          @racc_state.push _racc_do_reduce(arg, act)
          false
        }
        if code
          case code
          when 1 # yyerror
            @racc_user_yyerror = true   # user_yyerror
            return -reduce_n
          when 2 # yyaccept
            return shift_n
          else
            raise '[Racc Bug] unknown jump code'
          end
        end

      elsif act == shift_n
        #
        # accept
        #
        racc_accept if @yydebug
        throw :racc_end_parse, @racc_vstack[0]

      elsif act == -reduce_n
        #
        # error
        #
        case @racc_error_status
        when 0
          unless arg[21]    # user_yyerror
            nerr += 1
            on_error @racc_t, @racc_val, @racc_vstack
          end
        when 3
          if @racc_t == 0   # is $
            # We're at EOF, and another error occurred immediately after
            # attempting auto-recovery
            throw :racc_end_parse, nil
          end
          @racc_read_next = true
        end
        @racc_user_yyerror = false
        @racc_error_status = 3
        while true
          if i = action_pointer[@racc_state[-1]]
            i += 1   # error token
            if  i >= 0 and
                (act = action_table[i]) and
                action_check[i] == @racc_state[-1]
              break
            end
          end
          throw :racc_end_parse, nil if @racc_state.size <= 1
          @racc_state.pop
          @racc_vstack.pop
          if @yydebug
            @racc_tstack.pop
            racc_e_pop @racc_state, @racc_tstack, @racc_vstack
          end
        end
        return act

      else
        raise "[Racc Bug] unknown action #{act.inspect}"
      end

      racc_next_state(@racc_state[-1], @racc_state) if @yydebug

      nil
    end

    def _racc_do_reduce(arg, act)
      _,          _,            _,            _,
      goto_table, goto_check,   goto_default, goto_pointer,
      nt_base,    reduce_table, _,            _,
      _,          use_result,   * = arg

      state = @racc_state
      vstack = @racc_vstack
      tstack = @racc_tstack

      i = act * -3
      len       = reduce_table[i]
      reduce_to = reduce_table[i+1]
      method_id = reduce_table[i+2]
      void_array = []

      tmp_t = tstack[-len, len] if @yydebug
      tmp_v = vstack[-len, len]
      tstack[-len, len] = void_array if @yydebug
      vstack[-len, len] = void_array
      state[-len, len]  = void_array

      # tstack must be updated AFTER method call
      if use_result
        vstack.push __send__(method_id, tmp_v, vstack, tmp_v[0])
      else
        vstack.push __send__(method_id, tmp_v, vstack)
      end
      tstack.push reduce_to

      racc_reduce(tmp_t, reduce_to, tstack, vstack) if @yydebug

      k1 = reduce_to - nt_base
      if i = goto_pointer[k1]
        i += state[-1]
        if i >= 0 and (curstate = goto_table[i]) and goto_check[i] == k1
          return curstate
        end
      end
      goto_default[k1]
    end

    # This method is called when a parse error is found.
    #
    # ERROR_TOKEN_ID is an internal ID of token which caused error.
    # You can get string representation of this ID by calling
    # #token_to_str.
    #
    # ERROR_VALUE is a value of error token.
    #
    # value_stack is a stack of symbol values.
    # DO NOT MODIFY this object.
    #
    # This method raises ParseError by default.
    #
    # If this method returns, parsers enter "error recovering mode".
    def on_error(t, val, vstack)
      raise ParseError, sprintf("\nparse error on value %s (%s)",
                                val.inspect, token_to_str(t) || '?')
    end

    # Enter error recovering mode.
    # This method does not call #on_error.
    def yyerror
      throw :racc_jump, 1
    end

    # Exit parser.
    # Return value is Symbol_Value_Stack[0].
    def yyaccept
      throw :racc_jump, 2
    end

    # Leave error recovering mode.
    def yyerrok
      @racc_error_status = 0
    end

    # For debugging output
    def racc_read_token(t, tok, val)
      @racc_debug_out.print 'read    '
      @racc_debug_out.print tok.inspect, '(', racc_token2str(t), ') '
      @racc_debug_out.puts val.inspect
      @racc_debug_out.puts
    end

    def racc_shift(tok, tstack, vstack)
      @racc_debug_out.puts "shift   #{racc_token2str tok}"
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_reduce(toks, sim, tstack, vstack)
      out = @racc_debug_out
      out.print 'reduce '
      if toks.empty?
        out.print ' <none>'
      else
        toks.each {|t| out.print ' ', racc_token2str(t) }
      end
      out.puts " --> #{racc_token2str(sim)}"
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_accept
      @racc_debug_out.puts 'accept'
      @racc_debug_out.puts
    end

    def racc_e_pop(state, tstack, vstack)
      @racc_debug_out.puts 'error recovering mode: pop token'
      racc_print_states state
      racc_print_stacks tstack, vstack
      @racc_debug_out.puts
    end

    def racc_next_state(curstate, state)
      @racc_debug_out.puts  "goto    #{curstate}"
      racc_print_states state
      @racc_debug_out.puts
    end

    def racc_print_stacks(t, v)
      out = @racc_debug_out
      out.print '        ['
      t.each_index do |i|
        out.print ' (', racc_token2str(t[i]), ' ', v[i].inspect, ')'
      end
      out.puts ' ]'
    end

    def racc_print_states(s)
      out = @racc_debug_out
      out.print '        ['
      s.each {|st| out.print ' ', st }
      out.puts ' ]'
    end

    def racc_token2str(tok)
      self.class::Racc_token_to_s_table[tok] or
          raise "[Racc Bug] can't convert token #{tok} to string"
    end

    # Convert internal ID of token symbol to the string.
    def token_to_str(t)
      self.class::Racc_token_to_s_table[t]
    end

  end

end

...end racc/parser.rb/module_eval...
end
###### racc/parser.rb end


require_relative 'Lexer'
require_relative 'AST_yo'


class ErrorSintactico < RuntimeError
  def initialize(token)
    @token = token
  end

  def to_s
    "Error de sintaxis en linea #{@token.linea}, columna #{@token.columna}, token '#{@token.contenido}' inesperado."
  end
end

class Parser < Racc::Parser

module_eval(<<'...end Parser.y/module_eval...', 'Parser.y', 192)

    def initialize(lexer)
      @lexer = lexer
      @yydebug = true
      super()
    end 

    def on_error(id, token, stack)
      raise ErrorSintactico.new(token)
    end

    def next_token
      @lexer.shift
    end

    def parse
      do_parse
    end
...end Parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    28,    82,    29,    13,    13,    80,   124,    27,   125,    71,
    81,    12,    12,    25,   106,    62,    63,   108,    77,   107,
    74,   109,    24,    70,    26,    64,    21,    22,    28,   106,
    29,    39,   108,   114,   107,    27,   109,    23,    50,    53,
    48,    25,    51,    52,    50,    53,    48,    20,    33,    43,
    24,   116,    26,     4,    21,    22,   117,     5,    40,   119,
    10,     8,   120,   121,    28,    23,    29,     6,    43,     7,
     9,    27,    50,    53,    48,    20,    16,    25,    51,    52,
    50,    53,    48,    60,    35,    43,    24,   126,    26,     4,
    21,    22,    30,     5,   132,   128,    10,     8,    15,   130,
    28,    23,    29,     6,   131,     7,     9,    27,   102,    15,
   134,    20,    16,    25,    51,    52,    50,    53,    48,   135,
    11,    37,    24,   nil,    26,     4,    21,    22,   nil,     5,
   nil,   nil,    10,     8,   nil,   nil,    28,    23,    29,     6,
   nil,     7,     9,    27,   nil,   nil,   nil,    20,    16,    25,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    24,   nil,
    26,     4,    21,    22,   nil,     5,   nil,   nil,    10,     8,
   nil,   nil,    28,    23,    29,     6,   nil,     7,     9,    27,
   nil,   nil,   nil,    20,    16,    25,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    24,   nil,    26,     4,    21,    22,
   nil,     5,   127,   nil,    10,     8,   nil,   nil,    28,    23,
    29,     6,   nil,     7,     9,    27,    28,   nil,    29,    20,
    16,    25,   nil,    27,   nil,   nil,   nil,   nil,   nil,    25,
    24,   nil,    26,   nil,    21,    22,   nil,   nil,    24,   nil,
    26,   nil,    21,    22,    28,    23,    29,   nil,   nil,   nil,
   nil,    27,   nil,    23,   nil,    20,    33,    25,   nil,   nil,
   nil,   nil,   nil,    20,    33,   nil,    24,   nil,    26,     4,
    21,    22,   nil,     5,   nil,   nil,    10,     8,   nil,   nil,
    28,    23,    29,     6,   nil,     7,     9,    27,   nil,   nil,
   nil,    20,    16,    25,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    24,   nil,    26,   nil,    21,    22,    28,   nil,
    29,   nil,   nil,   nil,   nil,    27,   nil,    23,   nil,   nil,
   nil,    25,   nil,   nil,   nil,   nil,   nil,    20,    33,   nil,
    24,   nil,    26,     4,    21,    22,   nil,     5,   115,   nil,
    10,     8,   nil,   nil,    28,    23,    29,     6,   nil,     7,
     9,    27,   nil,   nil,   nil,    20,    16,    25,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    24,   nil,    26,   nil,
    21,    22,    28,   nil,    29,   nil,   nil,   nil,   nil,    27,
   nil,    23,   nil,   nil,   nil,    25,   nil,   nil,   nil,   nil,
   nil,    20,    33,   nil,    24,   nil,    26,     4,    21,    22,
   nil,     5,   113,   nil,    10,     8,   nil,   112,    28,    23,
    29,     6,   nil,     7,     9,    27,   nil,   nil,   nil,    20,
    16,    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    24,   nil,    26,   nil,    21,    22,    28,   nil,    29,   nil,
   nil,   nil,   nil,    27,   nil,    23,   nil,   nil,   nil,    25,
   nil,   nil,   nil,   nil,   nil,    20,    33,   nil,    24,   nil,
    26,     4,    21,    22,   nil,     5,   104,   nil,    10,     8,
   nil,   nil,    28,    23,    29,     6,   nil,     7,     9,    27,
   nil,   nil,   nil,    20,    16,    25,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    24,   nil,    26,     4,    21,    22,
   nil,     5,   nil,   nil,    10,     8,   nil,   nil,    28,    23,
    29,     6,   nil,     7,     9,    27,   nil,   nil,   nil,    20,
    16,    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    24,   nil,    26,     4,    21,    22,   nil,     5,    44,   nil,
    10,     8,   nil,   nil,    28,    23,    29,     6,   nil,     7,
     9,    27,   nil,   nil,   nil,    20,    16,    25,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    24,   nil,    26,     4,
    21,    22,   nil,     5,   nil,   nil,    10,     8,   nil,   nil,
    28,    23,    29,     6,   nil,     7,     9,    27,    28,   nil,
    29,    20,    16,    25,   nil,    27,    28,   nil,    29,   nil,
   nil,    25,    24,    27,    26,   nil,    21,    22,   nil,    25,
    24,   nil,    26,   nil,    21,    22,   nil,    23,    24,   nil,
    26,   nil,    21,    22,    28,    23,    29,    20,    33,   nil,
   nil,    27,    28,    23,    29,    20,    33,    25,   nil,    27,
    28,   nil,    29,    20,    33,    25,    24,    27,    26,   nil,
    21,    22,   nil,    25,    24,   nil,    26,   nil,    21,    22,
   nil,    23,    24,   nil,    26,   nil,    21,    22,    28,    23,
    29,    20,    33,   nil,   nil,    27,    28,    23,    29,    20,
    33,    25,   nil,    27,   nil,   nil,   nil,    20,    33,    25,
    24,   nil,    26,   nil,    21,    22,   nil,   nil,    24,   nil,
    26,   nil,    21,    22,    28,    23,    29,   nil,   nil,   nil,
   nil,    27,   nil,    23,   nil,    20,    33,    25,   nil,   nil,
   nil,   nil,   nil,    20,    33,   nil,    24,   nil,    26,     4,
    21,    22,   nil,     5,   137,   nil,    10,     8,   nil,   nil,
    28,    23,    29,     6,   nil,     7,     9,    27,    28,   nil,
    29,    20,    16,    25,   nil,    27,    28,   nil,    29,   nil,
   nil,    25,    24,    27,    26,   nil,    21,    22,   nil,    25,
    24,   nil,    26,   nil,    21,    22,   nil,    23,    24,   nil,
    26,   nil,    21,    22,    28,    23,    29,    20,    33,   nil,
   nil,    27,    28,    23,    29,    20,    33,    25,   nil,    27,
    28,   nil,    29,    20,    33,    25,    24,    27,    26,   nil,
    21,    22,   nil,    25,    24,   nil,    26,   nil,    21,    22,
   nil,    23,    24,   nil,    26,   nil,    21,    22,    28,    23,
    29,    20,    33,   nil,   nil,    27,   nil,    23,   nil,    20,
    33,    25,   nil,   nil,   nil,   nil,   nil,    20,    33,   nil,
    24,   nil,    26,     4,    21,    22,   nil,     5,   nil,   nil,
    10,     8,   nil,   nil,    28,    23,    29,     6,   nil,     7,
     9,    27,    28,   nil,    29,    20,    16,    25,   nil,    27,
    28,   nil,    29,   nil,   nil,    25,    24,    27,    26,   nil,
    21,    22,   nil,    25,    24,   nil,    26,   nil,    21,    22,
   nil,    23,    24,   nil,    26,   nil,    21,    22,    28,    23,
    29,    20,    33,   nil,   nil,    27,    28,    23,    29,    20,
    33,    25,   nil,    27,   nil,   nil,   nil,    20,    33,    25,
    24,   nil,    26,   nil,    21,    22,   nil,   nil,    24,   nil,
    26,   nil,    21,    22,   nil,    23,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    23,   nil,    20,    33,   118,   nil,   nil,
   nil,   nil,   nil,    20,    33,   nil,   nil,    51,    52,    50,
    53,    48,    60,    61,   nil,    54,    55,    56,    58,    59,
    57,    72,   nil,   nil,    49,   nil,   nil,   nil,   nil,   nil,
   nil,    51,    52,    50,    53,    48,    60,    61,   nil,    54,
    55,    56,    58,    59,    57,    47,   nil,   nil,    49,   nil,
   nil,   nil,   nil,    51,    52,    50,    53,    48,    60,    61,
   nil,    54,    55,    56,    58,    59,    57,    76,   nil,   nil,
    49,   nil,   nil,   nil,   nil,    51,    52,    50,    53,    48,
    60,    61,   nil,    54,    55,    56,    58,    59,    57,    83,
   nil,   nil,    49,   nil,   nil,   nil,   nil,    51,    52,    50,
    53,    48,    60,    61,   nil,    54,    55,    56,    58,    59,
    57,     4,   nil,   nil,    49,     5,   nil,   nil,    10,     8,
   nil,   nil,   nil,   nil,   nil,     6,   nil,     7,     9,   nil,
    98,   nil,   nil,   nil,     3,    51,    52,    50,    53,    48,
    60,    61,   nil,    54,    55,    56,    58,    59,    57,   nil,
    99,   nil,    49,    51,    52,    50,    53,    48,    60,    61,
   nil,    54,    55,    56,    58,    59,    57,   nil,   nil,    73,
    49,    51,    52,    50,    53,    48,    60,    61,   nil,    54,
    55,    56,    58,    59,    57,   nil,   nil,    75,    49,    51,
    52,    50,    53,    48,    60,    61,   nil,    54,    55,    56,
    58,    59,    57,   nil,   nil,   nil,    49,    51,    52,    50,
    53,    48,    60,    61,   nil,    54,    55,    56,    58,    59,
    57,    51,    52,    50,    53,    48,    60,    61,   nil,    54,
    55,    56,    58,    59,    57,    51,    52,    50,    53,    48,
    60,    61,   nil,   nil,    55,    56,    58,    59,    51,    52,
    50,    53,    48,    60,    61,   nil,   nil,   -57,   -57,   -57,
   -57,    51,    52,    50,    53,    48,    60,    61,   nil,   nil,
   -57,   -57,   -57,   -57,    51,    52,    50,    53,    48,    60,
    61,   nil,   nil,   -57,   -57,   -57,   -57,    51,    52,    50,
    53,    48,    60,    61,   nil,   nil,    55,    56,    58,    59,
    51,    52,    50,    53,    48,    60,    61,   nil,   nil,   -57,
   -57,   -57,   -57 ]

racc_action_check = [
    59,    43,    59,    16,     3,    42,   120,    59,   120,    31,
    43,    16,     3,    59,    80,    23,    23,    80,    39,    80,
    35,    80,    59,    30,    59,    24,    59,    59,   135,   130,
   135,    13,   130,   102,   130,   135,   130,    59,    88,    88,
    88,   135,    96,    96,    96,    96,    96,    59,    59,    82,
   135,   105,   135,   135,   135,   135,   109,   135,    14,   112,
   135,   135,   114,   117,   129,   135,   129,   135,   118,   135,
   135,   129,    87,    87,    87,   135,   135,   129,    97,    97,
    97,    97,    97,    97,     9,    15,   129,   121,   129,   129,
   129,   129,     6,   129,   129,   124,   129,   129,     4,   126,
   125,   129,   125,   129,   128,   129,   129,   125,    74,    41,
   131,   129,   129,   125,    65,    65,    65,    65,    65,   134,
     1,    11,   125,   nil,   125,   125,   125,   125,   nil,   125,
   nil,   nil,   125,   125,   nil,   nil,     5,   125,     5,   125,
   nil,   125,   125,     5,   nil,   nil,   nil,   125,   125,     5,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     5,   nil,
     5,     5,     5,     5,   nil,     5,   nil,   nil,     5,     5,
   nil,   nil,   123,     5,   123,     5,   nil,     5,     5,   123,
   nil,   nil,   nil,     5,     5,   123,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   123,   nil,   123,   123,   123,   123,
   nil,   123,   123,   nil,   123,   123,   nil,   nil,     7,   123,
     7,   123,   nil,   123,   123,     7,     8,   nil,     8,   123,
   123,     7,   nil,     8,   nil,   nil,   nil,   nil,   nil,     8,
     7,   nil,     7,   nil,     7,     7,   nil,   nil,     8,   nil,
     8,   nil,     8,     8,   119,     7,   119,   nil,   nil,   nil,
   nil,   119,   nil,     8,   nil,     7,     7,   119,   nil,   nil,
   nil,   nil,   nil,     8,     8,   nil,   119,   nil,   119,   119,
   119,   119,   nil,   119,   nil,   nil,   119,   119,   nil,   nil,
    10,   119,    10,   119,   nil,   119,   119,    10,   nil,   nil,
   nil,   119,   119,    10,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    10,   nil,    10,   nil,    10,    10,   103,   nil,
   103,   nil,   nil,   nil,   nil,   103,   nil,    10,   nil,   nil,
   nil,   103,   nil,   nil,   nil,   nil,   nil,    10,    10,   nil,
   103,   nil,   103,   103,   103,   103,   nil,   103,   103,   nil,
   103,   103,   nil,   nil,    12,   103,    12,   103,   nil,   103,
   103,    12,   nil,   nil,   nil,   103,   103,    12,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,    12,   nil,
    12,    12,   101,   nil,   101,   nil,   nil,   nil,   nil,   101,
   nil,    12,   nil,   nil,   nil,   101,   nil,   nil,   nil,   nil,
   nil,    12,    12,   nil,   101,   nil,   101,   101,   101,   101,
   nil,   101,   101,   nil,   101,   101,   nil,   101,    81,   101,
    81,   101,   nil,   101,   101,    81,   nil,   nil,   nil,   101,
   101,    81,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    81,   nil,    81,   nil,    81,    81,    78,   nil,    78,   nil,
   nil,   nil,   nil,    78,   nil,    81,   nil,   nil,   nil,    78,
   nil,   nil,   nil,   nil,   nil,    81,    81,   nil,    78,   nil,
    78,    78,    78,    78,   nil,    78,    78,   nil,    78,    78,
   nil,   nil,    75,    78,    75,    78,   nil,    78,    78,    75,
   nil,   nil,   nil,    78,    78,    75,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    75,   nil,    75,    75,    75,    75,
   nil,    75,   nil,   nil,    75,    75,   nil,   nil,    17,    75,
    17,    75,   nil,    75,    75,    17,   nil,   nil,   nil,    75,
    75,    17,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    17,   nil,    17,    17,    17,    17,   nil,    17,    17,   nil,
    17,    17,   nil,   nil,    73,    17,    73,    17,   nil,    17,
    17,    73,   nil,   nil,   nil,    17,    17,    73,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    73,   nil,    73,    73,
    73,    73,   nil,    73,   nil,   nil,    73,    73,   nil,   nil,
    72,    73,    72,    73,   nil,    73,    73,    72,    61,   nil,
    61,    73,    73,    72,   nil,    61,    25,   nil,    25,   nil,
   nil,    61,    72,    25,    72,   nil,    72,    72,   nil,    25,
    61,   nil,    61,   nil,    61,    61,   nil,    72,    25,   nil,
    25,   nil,    25,    25,    26,    61,    26,    72,    72,   nil,
   nil,    26,    27,    25,    27,    61,    61,    26,   nil,    27,
    28,   nil,    28,    25,    25,    27,    26,    28,    26,   nil,
    26,    26,   nil,    28,    27,   nil,    27,   nil,    27,    27,
   nil,    26,    28,   nil,    28,   nil,    28,    28,    29,    27,
    29,    26,    26,   nil,   nil,    29,    60,    28,    60,    27,
    27,    29,   nil,    60,   nil,   nil,   nil,    28,    28,    60,
    29,   nil,    29,   nil,    29,    29,   nil,   nil,    60,   nil,
    60,   nil,    60,    60,   136,    29,   136,   nil,   nil,   nil,
   nil,   136,   nil,    60,   nil,    29,    29,   136,   nil,   nil,
   nil,   nil,   nil,    60,    60,   nil,   136,   nil,   136,   136,
   136,   136,   nil,   136,   136,   nil,   136,   136,   nil,   nil,
    58,   136,    58,   136,   nil,   136,   136,    58,    57,   nil,
    57,   136,   136,    58,   nil,    57,    56,   nil,    56,   nil,
   nil,    57,    58,    56,    58,   nil,    58,    58,   nil,    56,
    57,   nil,    57,   nil,    57,    57,   nil,    58,    56,   nil,
    56,   nil,    56,    56,    55,    57,    55,    58,    58,   nil,
   nil,    55,    54,    56,    54,    57,    57,    55,   nil,    54,
    53,   nil,    53,    56,    56,    54,    55,    53,    55,   nil,
    55,    55,   nil,    53,    54,   nil,    54,   nil,    54,    54,
   nil,    55,    53,   nil,    53,   nil,    53,    53,    40,    54,
    40,    55,    55,   nil,   nil,    40,   nil,    53,   nil,    54,
    54,    40,   nil,   nil,   nil,   nil,   nil,    53,    53,   nil,
    40,   nil,    40,    40,    40,    40,   nil,    40,   nil,   nil,
    40,    40,   nil,   nil,    52,    40,    52,    40,   nil,    40,
    40,    52,    51,   nil,    51,    40,    40,    52,   nil,    51,
    50,   nil,    50,   nil,   nil,    51,    52,    50,    52,   nil,
    52,    52,   nil,    50,    51,   nil,    51,   nil,    51,    51,
   nil,    52,    50,   nil,    50,   nil,    50,    50,    49,    51,
    49,    52,    52,   nil,   nil,    49,    48,    50,    48,    51,
    51,    49,   nil,    48,   nil,   nil,   nil,    50,    50,    48,
    49,   nil,    49,   nil,    49,    49,   nil,   nil,    48,   nil,
    48,   nil,    48,    48,   nil,    49,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    48,   nil,    49,    49,   110,   nil,   nil,
   nil,   nil,   nil,    48,    48,   nil,   nil,   110,   110,   110,
   110,   110,   110,   110,   nil,   110,   110,   110,   110,   110,
   110,    32,   nil,   nil,   110,   nil,   nil,   nil,   nil,   nil,
   nil,    32,    32,    32,    32,    32,    32,    32,   nil,    32,
    32,    32,    32,    32,    32,    19,   nil,   nil,    32,   nil,
   nil,   nil,   nil,    19,    19,    19,    19,    19,    19,    19,
   nil,    19,    19,    19,    19,    19,    19,    38,   nil,   nil,
    19,   nil,   nil,   nil,   nil,    38,    38,    38,    38,    38,
    38,    38,   nil,    38,    38,    38,    38,    38,    38,    46,
   nil,   nil,    38,   nil,   nil,   nil,   nil,    46,    46,    46,
    46,    46,    46,    46,   nil,    46,    46,    46,    46,    46,
    46,     0,   nil,   nil,    46,     0,   nil,   nil,     0,     0,
   nil,   nil,   nil,   nil,   nil,     0,   nil,     0,     0,   nil,
    68,   nil,   nil,   nil,     0,    68,    68,    68,    68,    68,
    68,    68,   nil,    68,    68,    68,    68,    68,    68,   nil,
    69,   nil,    68,    69,    69,    69,    69,    69,    69,    69,
   nil,    69,    69,    69,    69,    69,    69,   nil,   nil,    34,
    69,    34,    34,    34,    34,    34,    34,    34,   nil,    34,
    34,    34,    34,    34,    34,   nil,   nil,    36,    34,    36,
    36,    36,    36,    36,    36,    36,   nil,    36,    36,    36,
    36,    36,    36,   nil,   nil,   nil,    36,    85,    85,    85,
    85,    85,    85,    85,   nil,    85,    85,    85,    85,    85,
    85,    66,    66,    66,    66,    66,    66,    66,   nil,    66,
    66,    66,    66,    66,    66,    90,    90,    90,    90,    90,
    90,    90,   nil,   nil,    90,    90,    90,    90,    94,    94,
    94,    94,    94,    94,    94,   nil,   nil,    94,    94,    94,
    94,    95,    95,    95,    95,    95,    95,    95,   nil,   nil,
    95,    95,    95,    95,    91,    91,    91,    91,    91,    91,
    91,   nil,   nil,    91,    91,    91,    91,    93,    93,    93,
    93,    93,    93,    93,   nil,   nil,    93,    93,    93,    93,
    92,    92,    92,    92,    92,    92,    92,   nil,   nil,    92,
    92,    92,    92 ]

racc_action_pointer = [
  1040,   120,   nil,     1,    64,   130,    38,   202,   210,    30,
   274,   121,   338,   -22,    23,    31,     0,   502,   nil,  1001,
   nil,   nil,   nil,   -11,   -18,   590,   618,   626,   634,   662,
    19,     5,   979,   nil,  1119,   -30,  1137,   nil,  1023,    14,
   822,    75,     0,    -1,   nil,   nil,  1045,   nil,   910,   902,
   874,   866,   858,   794,   786,   778,   750,   742,   734,    -6,
   670,   582,   nil,   nil,   nil,   102,  1169,   nil,  1083,  1101,
   nil,   nil,   574,   538,    55,   466,   nil,   nil,   430,   nil,
   -23,   402,    -5,   nil,   nil,  1155,   nil,    58,    24,   nil,
  1183,  1222,  1248,  1235,  1196,  1209,    30,    66,   nil,   nil,
   nil,   366,   -18,   302,   nil,    47,   nil,   nil,   nil,    48,
   955,   nil,    49,   nil,     9,   nil,   nil,    10,    14,   238,
    -2,    78,   nil,   166,    46,    94,    53,   nil,    51,    58,
    -8,   101,   nil,   nil,   109,    22,   698,   nil ]

racc_action_default = [
   -57,   -57,    -1,   -57,   -57,   -57,   -57,   -57,   -57,   -57,
   -57,   -57,   -57,   -57,   -57,   -57,   -34,   -57,   -13,   -57,
   -30,   -31,   -32,   -33,   -57,   -57,   -57,   -57,   -57,   -57,
   -57,   -57,   -28,   -34,   -57,   -57,   -57,   138,   -57,   -57,
   -57,   -17,   -57,   -23,    -4,   -15,   -57,   -14,   -57,   -57,
   -57,   -57,   -57,   -57,   -57,   -57,   -57,   -57,   -57,   -57,
   -57,   -57,   -37,   -38,   -35,   -52,   -53,   -54,   -57,   -57,
    -5,    -6,   -57,   -57,   -57,   -57,    -2,   -12,   -57,   -18,
   -57,   -57,   -57,   -16,   -36,   -39,   -40,   -41,   -42,   -43,
   -44,   -45,   -46,   -47,   -48,   -49,   -50,   -51,   -55,   -56,
   -29,   -57,   -57,   -57,    -3,   -57,   -24,   -25,   -26,   -57,
   -20,   -22,   -57,    -8,   -57,   -11,   -19,   -57,   -57,   -57,
   -57,   -57,   -21,   -57,   -57,   -57,   -57,    -7,   -57,   -57,
   -57,   -57,   -10,   -27,   -57,   -57,   -57,    -9 ]

racc_goto_table = [
     2,    17,    31,    32,    34,    42,    36,     1,    38,   105,
    41,   nil,   nil,    46,   nil,   nil,   nil,    45,   nil,   nil,
   nil,    65,    66,    67,    68,    69,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    78,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    84,    85,    86,    87,    88,    89,
    90,    91,    92,    93,    94,    95,    96,    97,   nil,   133,
   nil,   nil,   nil,    79,   nil,   nil,   nil,   100,    32,   101,
   nil,   103,   111,   nil,    46,   nil,   nil,   110,    45,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    46,   nil,    46,
   nil,    45,   nil,    45,   nil,   nil,   nil,   nil,   122,   nil,
   nil,   nil,   nil,   nil,   nil,   123,   nil,   nil,   nil,    46,
   nil,   129,   nil,    45,   nil,    46,   nil,   nil,   nil,    45,
   nil,   136,    46,   nil,   nil,   nil,    45 ]

racc_goto_check = [
     2,     5,     6,     3,     3,     8,     3,     1,     3,     9,
     7,   nil,   nil,     3,   nil,   nil,   nil,     2,   nil,   nil,
   nil,     3,     3,     3,     3,     3,     4,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     5,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,   nil,     9,
   nil,   nil,   nil,     4,   nil,   nil,   nil,     6,     3,     5,
   nil,     5,     8,   nil,     3,   nil,   nil,     3,     2,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,   nil,     3,
   nil,     2,   nil,     2,   nil,   nil,   nil,   nil,     8,   nil,
   nil,   nil,   nil,   nil,   nil,     5,   nil,   nil,   nil,     3,
   nil,     5,   nil,     2,   nil,     3,   nil,   nil,   nil,     2,
   nil,     5,     3,   nil,   nil,   nil,     2 ]

racc_goto_pointer = [
   nil,     7,     0,    -4,    22,    -4,    -5,    -5,   -10,   -71 ]

racc_goto_default = [
   nil,   nil,    18,    19,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 56, :_reduce_1,
  4, 57, :_reduce_2,
  5, 57, :_reduce_3,
  3, 57, :_reduce_4,
  3, 57, :_reduce_5,
  3, 57, :_reduce_6,
  8, 57, :_reduce_7,
  5, 57, :_reduce_8,
  13, 57, :_reduce_9,
  9, 57, :_reduce_10,
  5, 57, :_reduce_11,
  4, 57, :_reduce_12,
  1, 60, :_reduce_13,
  2, 60, :_reduce_14,
  2, 60, :_reduce_15,
  3, 60, :_reduce_16,
  2, 59, :_reduce_17,
  3, 59, :_reduce_18,
  4, 62, :_reduce_19,
  3, 63, :_reduce_20,
  5, 63, :_reduce_21,
  3, 63, :_reduce_22,
  1, 63, :_reduce_23,
  1, 64, :_reduce_24,
  1, 64, :_reduce_25,
  1, 64, :_reduce_26,
  6, 64, :_reduce_27,
  1, 61, :_reduce_28,
  3, 61, :_reduce_29,
  1, 58, :_reduce_30,
  1, 58, :_reduce_31,
  1, 58, :_reduce_32,
  1, 58, :_reduce_33,
  1, 58, :_reduce_34,
  2, 58, :_reduce_35,
  3, 58, :_reduce_36,
  2, 58, :_reduce_37,
  2, 58, :_reduce_38,
  3, 58, :_reduce_39,
  3, 58, :_reduce_40,
  3, 58, :_reduce_41,
  3, 58, :_reduce_42,
  3, 58, :_reduce_43,
  3, 58, :_reduce_44,
  3, 58, :_reduce_45,
  3, 58, :_reduce_46,
  3, 58, :_reduce_47,
  3, 58, :_reduce_48,
  3, 58, :_reduce_49,
  3, 58, :_reduce_50,
  3, 58, :_reduce_51,
  2, 58, :_reduce_52,
  2, 58, :_reduce_53,
  2, 58, :_reduce_54,
  3, 58, :_reduce_55,
  3, 58, :_reduce_56 ]

racc_reduce_n = 57

racc_shift_n = 138

racc_token_table = {
  false => 0,
  :error => 1,
  TkComa => 2,
  TkPunto => 3,
  TkPuntoYComa => 4,
  TkDosPuntos => 5,
  TkParAbre => 6,
  TkParCierra => 7,
  TkCorcheteAbre => 8,
  TkCorcheteCierre => 9,
  TkHacer => 10,
  TkAsignacion => 11,
  TkSuma => 12,
  TkResta => 13,
  TkMult => 14,
  TkDiv => 15,
  TkMod => 16,
  TkConjuncion => 17,
  TkDisyuncion => 18,
  TkNegacion => 19,
  TkDesigualdad => 20,
  TkMenor => 21,
  TkMenorIgual => 22,
  TkMayor => 23,
  TkMayorIgual => 24,
  TkIgual => 25,
  TkSiguienteCar => 26,
  TkAnteriorCar => 27,
  TkValorAscii => 28,
  TkConcatenacion => 29,
  TkShift => 30,
  TkWith => 31,
  TkTrue => 32,
  TkFalse => 33,
  TkVar => 34,
  TkBegin => 35,
  TkEnd => 36,
  TkInt => 37,
  TkWhile => 38,
  TkIf => 39,
  TkChar => 40,
  TkOtherwise => 41,
  TkBool => 42,
  TkCaracter => 43,
  TkArray => 44,
  TkRead => 45,
  TkOf => 46,
  TkPrint => 47,
  TkFor => 48,
  TkStep => 49,
  TkFrom => 50,
  TkTo => 51,
  :UMINUS => 52,
  TkNum => 53,
  TkId => 54 }

racc_nt_base = 55

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\",\"",
  "\".\"",
  "\";\"",
  "\":\"",
  "\"(\"",
  "\")\"",
  "\"[\"",
  "\"]\"",
  "\"->\"",
  "\"<-\"",
  "\"+\"",
  "\"-\"",
  "\"*\"",
  "\"\\\\/\"",
  "\"%\"",
  "\"\\\\/\\\\\"",
  "\"\\\\\\\\/\"",
  "\"not\"",
  "\"/=\"",
  "\"<\"",
  "\"<=\"",
  "\">\"",
  "\">=\"",
  "\"=\"",
  "\"++\"",
  "\"--\"",
  "\"#\"",
  "\"::\"",
  "\"$\"",
  "\"with\"",
  "\"true\"",
  "\"false\"",
  "\"var\"",
  "\"begin\"",
  "\"end\"",
  "\"int\"",
  "\"while\"",
  "\"if\"",
  "\"char\"",
  "\"otherwise\"",
  "\"bool\"",
  "\"caracter\"",
  "\"array\"",
  "\"read\"",
  "\"of\"",
  "\"print\"",
  "\"for\"",
  "\"step\"",
  "\"from\"",
  "\"to\"",
  "UMINUS",
  "\"num\"",
  "\"id\"",
  "$start",
  "Programa",
  "Instruccion",
  "Expresion",
  "LDeclaraciones",
  "Instrucciones",
  "ElementosSalida",
  "Declaracion",
  "Argumentos",
  "Tipo" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'Parser.y', 94)
  def _reduce_1(val, _values, result)
    result = Programa.new(val[0])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 97)
  def _reduce_2(val, _values, result)
      result = Asignacion.new(val[0].contenido, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 98)
  def _reduce_3(val, _values, result)
     result = WBloque.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 99)
  def _reduce_4(val, _values, result)
      result = Bloque.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 100)
  def _reduce_5(val, _values, result)
      result = Read.new(val[1].contenido)  
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 101)
  def _reduce_6(val, _values, result)
      result = Print.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 103)
  def _reduce_7(val, _values, result)
     result = IfOtherEnd.new(val[1], val[3], val[6])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 104)
  def _reduce_8(val, _values, result)
     result = IfEnd.new(val[1], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 107)
  def _reduce_9(val, _values, result)
    result = Iteracion_DetStep.new(val[1].contenido,val[3].contenido, val[5].contenido, val[8].contenido, val[11])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 109)
  def _reduce_10(val, _values, result)
    result = Iteracion_Det.new(val[1].contenido,val[3].contenido, val[5].contenido, val[7])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 111)
  def _reduce_11(val, _values, result)
     result = Iteracion_Indet.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 112)
  def _reduce_12(val, _values, result)
     result = Punto.new(val[0].contenido, val[2].contenido)   
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 115)
  def _reduce_13(val, _values, result)
     result = val[0]           
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 116)
  def _reduce_14(val, _values, result)
     result = val[0]           
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 117)
  def _reduce_15(val, _values, result)
     result = Instrucciones.new(val[0] , val[1])  
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 118)
  def _reduce_16(val, _values, result)
      result = Instrucciones.new(val[0] , val[1] ) 
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 121)
  def _reduce_17(val, _values, result)
     result = LDeclaracionS.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 122)
  def _reduce_18(val, _values, result)
     result = LDeclaracionRec.new(val[1], val[2] )
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 125)
  def _reduce_19(val, _values, result)
     result = Declaracion.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 128)
  def _reduce_20(val, _values, result)
     result = Argumento.new(val[0].contenido , val[2], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 129)
  def _reduce_21(val, _values, result)
     result = Argumento.new(val[0].contenido , val[2] , val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 130)
  def _reduce_22(val, _values, result)
     result = ArgumentoId.new(val[0].contenido , val[2], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 131)
  def _reduce_23(val, _values, result)
     result = Argumento.new(val[0].contenido , nil, nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 134)
  def _reduce_24(val, _values, result)
     result = Int.new() 
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 135)
  def _reduce_25(val, _values, result)
     result = Bool.new() 
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 136)
  def _reduce_26(val, _values, result)
     result = Char.new()       
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 137)
  def _reduce_27(val, _values, result)
     result = Matriz.new(val[2].contenido, val[5])
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 141)
  def _reduce_28(val, _values, result)
     result = Salida.new(val[0], nil)          
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 142)
  def _reduce_29(val, _values, result)
     result = Salida.new(val[0] , val[2])  
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 145)
  def _reduce_30(val, _values, result)
     result = Entero.new(val[0].contenido)         
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 146)
  def _reduce_31(val, _values, result)
     result = True.new()                 
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 147)
  def _reduce_32(val, _values, result)
     result = False.new()                
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 148)
  def _reduce_33(val, _values, result)
     result = Letra.new(val[0].contenido )       
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 149)
  def _reduce_34(val, _values, result)
     result = Variable.new(val[0].contenido)       
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 150)
  def _reduce_35(val, _values, result)
     result = ValorAscii.new(val[0])     
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 151)
  def _reduce_36(val, _values, result)
     result = Modulo.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 152)
  def _reduce_37(val, _values, result)
     result = SiguienteCar.new(val[0].contenido)   
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 153)
  def _reduce_38(val, _values, result)
     result = AnteriorCar.new(val[0].contenido)    
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 154)
  def _reduce_39(val, _values, result)
     result = Concatenacion.new(val[0], val[2])   
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 155)
  def _reduce_40(val, _values, result)
     result = Multiplicacion.new(val[0], val[2])  
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 156)
  def _reduce_41(val, _values, result)
     result = Suma.new(val[0], val[2])            
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 157)
  def _reduce_42(val, _values, result)
     result = Resta.new(val[0], val[2])           
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 158)
  def _reduce_43(val, _values, result)
     result = Division.new(val[0], val[2])        
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 159)
  def _reduce_44(val, _values, result)
     result = Desigualdad.new(val[0], val[2])     
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 160)
  def _reduce_45(val, _values, result)
     result = Menor.new(val[0], val[2])           
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 161)
  def _reduce_46(val, _values, result)
     result = MenorIgual.new(val[0], val[2])      
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 162)
  def _reduce_47(val, _values, result)
     result = Igual.new(val[0], val[2])           
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 163)
  def _reduce_48(val, _values, result)
     result = Mayor.new(val[0], val[2])           
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 164)
  def _reduce_49(val, _values, result)
     result = MayorIgual.new(val[0], val[2])      
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 165)
  def _reduce_50(val, _values, result)
     result = And.new(val[0], val[2])     
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 166)
  def _reduce_51(val, _values, result)
     result = Or.new(val[0], val[2])      
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 167)
  def _reduce_52(val, _values, result)
     result = Not.new(val[1])             
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 168)
  def _reduce_53(val, _values, result)
     result = Shift.new(val[1])           
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 169)
  def _reduce_54(val, _values, result)
     result = MenosUnario.new(val[1])    
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 170)
  def _reduce_55(val, _values, result)
     result = val[1]                       
    result
  end
.,.,

module_eval(<<'.,.,', 'Parser.y', 171)
  def _reduce_56(val, _values, result)
     result = val[1]                       
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
